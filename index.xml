<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Raphaël CHARTIER</title>
    <link>http://rachartier.github.io/</link>
    <description>Recent content on Raphaël CHARTIER</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr-fr</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sun, 07 Apr 2019 00:36:29 +0200</lastBuildDate>
    
	<atom:link href="http://rachartier.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Portfolio</title>
      <link>http://rachartier.github.io/portfolio/</link>
      <pubDate>Sun, 07 Apr 2019 00:36:29 +0200</pubDate>
      
      <guid>http://rachartier.github.io/portfolio/</guid>
      <description> EN COURS DE REDACTION </description>
    </item>
    
    <item>
      <title>A Propos</title>
      <link>http://rachartier.github.io/a-propos/</link>
      <pubDate>Sun, 07 Apr 2019 00:35:47 +0200</pubDate>
      
      <guid>http://rachartier.github.io/a-propos/</guid>
      <description></description>
    </item>
    
    <item>
      <title>About</title>
      <link>http://rachartier.github.io/about/</link>
      <pubDate>Sat, 06 Apr 2019 22:20:59 +0200</pubDate>
      
      <guid>http://rachartier.github.io/about/</guid>
      <description>coucou</description>
    </item>
    
    <item>
      <title>Dynamo</title>
      <link>http://rachartier.github.io/projet/dynamo/</link>
      <pubDate>Wed, 06 Feb 2019 23:56:47 +0200</pubDate>
      
      <guid>http://rachartier.github.io/projet/dynamo/</guid>
      <description>Jeu crée en 7 semaines à l&amp;rsquo;occasion du cours de Android en 2ème année de DUT Informatique, où l&amp;rsquo;on devait réaliser entièrement une application mobile dans la plus petite API possible. Le jeu est jouable en API 14 (100% des téléphones).
Dynamo est un jeu de plateforme liant agilité et vitesse pour parvenir à bout d&amp;rsquo;un unique niveau, long et remplit de pièges.
Le jeu est 2d-scroller, ce qui signifie que le héros peut se déplacer à droite, gauche et sauter.</description>
    </item>
    
    <item>
      <title>Medusa</title>
      <link>http://rachartier.github.io/projet/medusa/</link>
      <pubDate>Fri, 18 Jan 2019 23:56:42 +0200</pubDate>
      
      <guid>http://rachartier.github.io/projet/medusa/</guid>
      <description>EN COURS DE REDACTION Application réalisée en une semaine à l&amp;rsquo;occasion du festival du court métrage 2019 se déroulant à Clermont-Ferrand.
Medusa était une demande de plusieurs autres écoles afin de réunir les différentes disciplines de ces dernières, à savoir l&amp;rsquo;art, la coiffure, et la programmation.
L&amp;rsquo;application se veut être temps réel, et utilise une Kinect pour faire l&amp;rsquo;acquisition de l&amp;rsquo;image.</description>
    </item>
    
    <item>
      <title>Pokemon Du Pauvre</title>
      <link>http://rachartier.github.io/projet/pokemon-du-pauvre/</link>
      <pubDate>Wed, 14 Nov 2018 22:57:02 +0200</pubDate>
      
      <guid>http://rachartier.github.io/projet/pokemon-du-pauvre/</guid>
      <description>Jeu ressemblant aux fameux jeux Pokemon, ce &amp;ldquo;pokemon du pauvre&amp;rdquo; vise à creer une expérience simple. Le joueur peut consulter la liste de nombreux pokemons dans le pokdex, visiter des terrains générés aléatoirements, écouter la musique des premiers jeux tout en combattant des pokemons adverses pour au final les capturer. Le jeu dispose aussi de sauvegardes et de chargement de ces dernières.
 Fait en 7 semaines lors d&amp;rsquo;un projet de programmation orientée objet en 2éme année d&amp;rsquo;IUT Informartique Fait en JavaFX Respecte au maximum le principe SOLID Musiques originales Niveaux générés aléatoiements Toute la 1ère génération de Pokemon est présente Sauvegarde/chargement  Lien Github</description>
    </item>
    
    <item>
      <title>ColorfullBinaries</title>
      <link>http://rachartier.github.io/code/colorfullbinaries/</link>
      <pubDate>Sat, 22 Sep 2018 14:48:29 +0200</pubDate>
      
      <guid>http://rachartier.github.io/code/colorfullbinaries/</guid>
      <description>Permet de donner de la couleurs à vos fichier binaire. Créer une &amp;ldquo;image&amp;rdquo; dans un émulateur de terminal d&amp;rsquo;un fichier binaire.
Utilisation gcc main.c -Wall -Wextra ./a.out -o /bin/ls -w 32 -h 32  Commandes  -o &amp;lt;filename&amp;gt; le fichier à ouvrir -w &amp;lt;width&amp;gt; régle la largeur de la sortie -h &amp;lt;height&amp;gt; régle la hauteur de la sortie -c &amp;lt;char&amp;gt; modifie le charactère de la sortie  Images Code #include &amp;lt;stdio.</description>
    </item>
    
    <item>
      <title>Tiny ASM Interpreter</title>
      <link>http://rachartier.github.io/projet/tiny-asm-interpreter/</link>
      <pubDate>Sun, 20 May 2018 11:22:23 +0200</pubDate>
      
      <guid>http://rachartier.github.io/projet/tiny-asm-interpreter/</guid>
      <description>Un intépreteur d&amp;rsquo;un langage d&amp;rsquo;assembleur fortement simplifié.
Utilisation:
./tinyasminterpreter &amp;lt;nom fichier&amp;gt;  Il y a 6 registres (R1-6).
Ajouter un &amp;lsquo;#&amp;rsquo; devant un nombre signifie que ce qui suit sera utilisé comme un entier
 add #10,R1 ajoutera le nombre 10 dans le registre R1  Pour acceder un espace mémoire, il suffit de faire: [x], où x represente l&amp;rsquo;emplacement mémoire (de 0 à 32768):
 add #10,[50] ajoutera le nombre 10 à l&amp;rsquo;emplacement mémoire 50  Pour créer une fonction, il suffit de faire comme un label, puis à la fin de la fonction mettre l&amp;rsquo;instruction ret, qui permettra de revenir à l&amp;rsquo;appel de la fonction + 1 ligne.</description>
    </item>
    
    <item>
      <title>Truth Table</title>
      <link>http://rachartier.github.io/code/truth-table/</link>
      <pubDate>Tue, 07 Nov 2017 23:00:35 +0200</pubDate>
      
      <guid>http://rachartier.github.io/code/truth-table/</guid>
      <description>Générateur de table de vérité avec la notation polonaise inverse.
L&amp;rsquo;utilisation se fait via la ligne de commande:
gcc truthtable.c -Wall -Wextra -std=c11 -lm -o ttable ./ttable &amp;quot;expression&amp;quot;  L&amp;rsquo;expression doit être une expression ecrite via la notation polonaise inverse comme suit:
 &amp;ldquo; [variable_2] &amp;rdquo; La répétition de ce processus permet de former une expression logique. Le programme va ensuite sortir la table de vérité corespondante, avec les noms des variables transmises.</description>
    </item>
    
    <item>
      <title>Pendule Double</title>
      <link>http://rachartier.github.io/code/pendule-double/</link>
      <pubDate>Mon, 23 Jan 2017 23:00:18 +0200</pubDate>
      
      <guid>http://rachartier.github.io/code/pendule-double/</guid>
      <description>Pendule Double est la simulation de &amp;ldquo;l&amp;rsquo;aleatoire chaotique&amp;rdquo; en utilisant un pendule relie a un dernier, qui est fixe.
Compilation gcc doublependulum.c -o doublependulum -lm -Wall -Wextra -lSDL2 -lSDL2main  Commandes  a: diminue la taille du premier pendule | z: augmente la taille du premier pendule e: diminue la taille du second pendule | r: augmente la taille du second pendule q: diminue la masse du premier pendule | s: augmente la masse du premier pendule d: diminue la masse du second pendule | f: augmente la masse du second pendule i: affiche les informations des pendules dans la console n: permet de reinitialiser aléatoirement les pendules  Vidéo Vidéo de démonstration</description>
    </item>
    
  </channel>
</rss>